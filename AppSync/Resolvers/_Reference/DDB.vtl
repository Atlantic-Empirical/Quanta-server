// REQUEST PUT

## Below example shows how to create an object from all provided GraphQL arguments
## The primary key of the obejct is a randomly generated UUD using the $util.autoId() utility
## Other utilities include $util.matches() for regular expressions, $util.time.nowISO8601() or
##   $util.time.nowEpochMilliSeconds() for timestamps, and even List or Map helpers like
##   $util.list.copyAndRetainAll() $util.map.copyAndRemoveAllKeys() for shallow copies
## Read more: https://docs.aws.amazon.com/appsync/latest/devguide/resolver-context-reference.html#utility-helpers-in-util

{
    "version" : "2017-02-28",
    "operation" : "PutItem",
    "key" : {
        ## If object "id" should come from GraphQL arguments, change to $util.dynamodb.toDynamoDBJson($ctx.args.id)
        "userId": $util.dynamodb.toDynamoDBJson($context.identity.cognitoIdentityId),
    },
    "attributeValues" : $util.dynamodb.toMapValuesJson($ctx.args)
}


// UpdateItem
{
    "version" : "2017-02-28",
    "operation" : "UpdateItem",
    "key" : {
        "userId": $util.dynamodb.toDynamoDBJson($context.identity.cognitoIdentityId)
    },
    "update" : {
        "expression": "SET #sub = :v1",
        "expressionNames" : { "#sub": "sub" },
       "expressionValues" : {
           ":v1": $util.dynamodb.toDynamoDBJson($ctx.args.sub)
       }
    }
}


// REQUEST GET

## Below example shows how to look up an item with a Primary Key of "id" from GraphQL arguments
## The helper $util.dynamodb.toDynamoDBJson automatically converts to a DynamoDB formatted request
## There is a "context" object with arguments, identity, headers, and parent field information you can access.
## It also has a shorthand notation avaialable:
##  - $context or $ctx is the root object
##  - $ctx.arguments or $ctx.args contains arguments
##  - $ctx.identity has caller information, such as $ctx.identity.username
##  - $ctx.request.headers contains headers, such as $context.request.headers.xyz
##  - $ctx.source is a map of the parent field, for instance $ctx.source.xyz
## Read more: https://docs.aws.amazon.com/appsync/latest/devguide/resolver-mapping-template-reference.html

{
    "version": "2017-02-28",
    "operation": "GetItem",
    "key": {
        "userId": $util.dynamodb.toDynamoDBJson($ctx.identity.cognitoIdentityId)
##        "userId": $util.dynamodb.toDynamoDBJson("us-east-1:0e8b454a-9291-444b-bd99-093d50db01eb")
    }
}


// RESPONSE

## Pass back the result from DynamoDB. **
$util.isNull($ctx.result)

##$util.toJson($ctx.result)

// REQUEST GET FROM FIO-TABLE-USER-DETAILS

{
    "version": "2017-02-28",
    "operation": "GetItem",
    "key": {
    	"userId": $util.dynamodb.toDynamoDBJson($ctx.identity.cognitoIdentityId),
        "objectTypeId": $util.dynamodb.toDynamoDBJson(3)
    }
}


REQUEST QUERY WITH FILTER

{
    "version" : "2017-02-28",
    "operation" : "Query",
    "index" : "userId-windowSize-index",
    "query" : {
      "expression": "userId = :userId AND windowSize = :windowSize",
        "expressionValues" : {
          ## ":userId" : $util.dynamodb.toDynamoDBJson($ctx.identity.cognitoIdentityId),
          ":userId" : $util.dynamodb.toDynamoDBJson("us-east-1:0e8b454a-9291-444b-bd99-093d50db01eb"),
		  ":windowSize" : $util.dynamodb.toDynamoDBJson(${ctx.args.windowSize})
        }
    },
    "filter": {
      "expression": "#periodId BETWEEN :periodIdStart AND :periodIdEnd",
      "expressionNames" : {
          "#periodId" : "periodId"
      },
      "expressionValues": {
          ":periodIdStart": $util.dynamodb.toDynamoDBJson(${ctx.args.periodIdStart}),
          ":periodIdEnd": $util.dynamodb.toDynamoDBJson(${ctx.args.periodIdEnd})
        }
    }
}
